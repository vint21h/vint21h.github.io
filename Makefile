.ONESHELL:
default: help
PHONY: install-requirements install-python-requirements install-js-requirements check-requirements check-python-requirements check-js-requirements check test setup-env install-pre-commit-hook bootstrap clean bumpversion help
SHELL = bash
ENVIRONMENT ?= dev
NAME ?= resume
TRASH_DIRS ?= build dist *.egg-info .tox .mypy_cache .pytest_cache __pycache__ htmlcov
TRASH_FILES ?= .coverage
VERSION ?= `python -c "import toml; import pathlib; print(toml.load(f=pathlib.Path('pyproject.toml')).get('project', {}).get('version'));"`


install-requirements: install-python-requirements install-js-requirements

install-python-requirements:
	ENVIRONMENT="{$(ENVIRONMENT) | tr -d \'[:blank:]\'}";\
	if [[ "${ENVIRONMENT}" ]]; then
		python -m pip install .[$(ENVIRONMENT)];\
	else
		python -m pip install .;\
	fi

install-js-requirements:
	ENVIRONMENT="{$(ENVIRONMENT) | tr -d \'[:blank:]\'}";\
	if [[ "${ENVIRONMENT}" ]]; then
		npm install --include=[$(ENVIRONMENT)];\
	else
		npm install;\
	fi

check:
	bash -c 'pre-commit run --all-files';\

test:
	PYTHONDONTWRITEBYTECODE=1 PYTHONPATH="$${PYTHONPATH}:$${PWD}" pytest --import-mode=importlib --cov=$(NAME) $(TESTS);\

setup-env:
	cp .env.example .env;\
	direnv allow;\

install-pre-commit-hook:
	pre-commit install;\

bootstrap: setup-env install-requirements install-pre-commit-hook

shell:
	PYTHONPATH="$${PYTHONPATH}:$${PWD}" bpython;\

clean:
	for file in $(TRASH_FILES); do\
		find -iname $${file} -print0 | xargs -0 rm -rf;\
	done;\
	for dir in $(TRASH_DIRS); do\
		find -type d -name $${dir} ! -path "*/.direnv/*" -print0 | xargs -0 rm -rf;\
	done;\

bumpversion:
	git tag -a $(VERSION) -m "v$(VERSION)";\

check-requirements: check-python-requirements check-js-requirements

check-python-requirements:
	pip list --outdated;\

check-js-requirements:
	npm outdated;\

help:
	@echo "    help:"
	@echo "        Show this help."
	@echo "    install-requirements:"
	@echo "        Install Python/JavaScript requirements."
	@echo "    install-python-requirements:"
	@echo "        Install Python requirements."
	@echo "    install-js-requirements:"
	@echo "        Install JavaScript requirements."
	@echo "    check:"
	@echo "        Perform some code checks."
	@echo "    test:"
	@echo "        Run tests, can specify tests with 'TESTS' variable."
	@echo "    setup-env:"
	@echo "        Copy example environment config for development and setup virtualenv."
	@echo "    install-pre-commit-hook:"
	@echo "        Setup pre commit hook."
	@echo "    bootstrap:"
	@echo "        Bootstrap project."
	@echo "    shell:"
	@echo "        Open python REPL with loaded application."
	@echo "    clean:"
	@echo "        Recursively delete useless autogenerated files and directories, directories and files lists can be overriden through 'TRASH_DIRS' and 'TRASH_FILES' variables."
	@echo "    bumpversion:"
	@echo "        Tag current code revision with version."
	@echo "    check-requirements:"
	@echo "        Check outdated Python/JavaScript requirements."
	@echo "    check-python-requirements:"
	@echo "        Check outdated Python requirements."
	@echo "    check-js-requirements:"
	@echo "        Check outdated JavaScript requirements."
